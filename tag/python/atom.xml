<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Midnight Coding</title><link href="http://nicoddemus.github.io/" rel="alternate"></link><link href="http://nicoddemus.github.io/tag/python/atom.xml" rel="self"></link><id>http://nicoddemus.github.io/</id><updated>2016-02-13T00:00:00-02:00</updated><entry><title>Pytest 2016 sprint funding</title><link href="http://nicoddemus.github.io/articles/pytest-2016-sprint" rel="alternate"></link><updated>2016-02-13T00:00:00-02:00</updated><author><name>Bruno Oliveira</name></author><id>tag:nicoddemus.github.io,2016-02-13:articles/pytest-2016-sprint</id><summary type="html">&lt;h1&gt;Pytest Sprint 2016&lt;/h1&gt;
&lt;p&gt;In June &lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt; core developers and users are gathering in Freiburg, Germany for
a &lt;a href="http://pytest.org/latest/announce/sprint2016.html"&gt;sprint&lt;/a&gt;. This is being
funded by a &lt;a href="https://www.indiegogo.com/projects/python-testing-sprint-mid-2016#"&gt;indiegogo campaign&lt;/a&gt;, so
if you are a pytest user or your company heavily relies on pytest, please consider 
making a donation!&lt;/p&gt;
&lt;p&gt;Some topics I'm excited about and probably will work on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improve pytest-xdist to use fixture-based scheduling. This is a long standing 
  topic, you can see more details in this 
  pytest-xdist &lt;a href="https://github.com/pytest-dev/pytest-xdist/issues/18"&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve xUnit setup/teardown support by using internal auto-use fixtures.
  This would solve some ordering issues like &lt;a href="https://github.com/pytest-dev/pytest/issues/517"&gt;#517&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixing some long standing bugs and review the issue tracker.   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Back in 2013&lt;/h1&gt;
&lt;p&gt;I was really excited when I first discovered pytest. I wrote a post
titled &lt;em&gt;pytest: best thing since sliced bread&lt;/em&gt; in our company blog, highlighting the features I 
liked best. Our blog is not public, but I will post some of its 
contents here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertEqual?&lt;/strong&gt; no more. You just use plain asserts, and assertion rewrite
 means that special output in failed assertions can be done, for example
 by showing a context diff if a string comparison fails. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test finding&lt;/strong&gt;: The test runner automatically finds and runs tests just like 
  we expect it, including xUnit style tests. 
  Also, it supports using simple functions instead of having to subclass some test base class.
  This was a problem back then, so we wrote our own test runner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Coverage&lt;/strong&gt;: Back then our own test runner implemented code coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parallel Support&lt;/strong&gt;: Again our test runner implemented this. This was a major
  need for us as we have thousands of tests so running them sequentially is not
  an option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;skip and xfail&lt;/strong&gt; built-in decorators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--pastebin&lt;/code&gt; parameter. Very useful to share errors with others, better
  than pasting a messy traceback in Skype (still used for communication to this day). 
  This is an underrated core plugin in my opinion. :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fixtures&lt;/strong&gt;, which is one of the killer pytest feature.
  The automatic dependency injection really shines in promoting code re-use
  between tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;: all features are implemented in terms of plugins, 
  and this is another pytest killer feature as the 
  &lt;a href="http://plugincompat.herokuapp.com"&gt;plugin ecosystem&lt;/a&gt; is huge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Adopting&lt;/h1&gt;
&lt;p&gt;py.test was so feature-rich that we decided to ditch our test runner. It was
argued that even if you wanted to write only xUnit-style tests and leave
more advanced features (like fixtures) alone, being able to write plain asserts
was enough reason to replace our runner.&lt;/p&gt;
&lt;p&gt;It was only two years later that we could finally adopt py.test 
for all projects. While initially there were concerns now even the initial 
nay-sayers are praising py.test.&lt;/p&gt;
&lt;p&gt;It took us this long because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was not a full-time thing, it was something one team member or another
  (mostly me) spending some free extra time on.&lt;/li&gt;
&lt;li&gt;We needed support for running Qt tests, so I wrote &lt;a href="https://github.com/pytest-dev/pytest-qt"&gt;pytest-qt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There were several tests with problems when running under xdist. This happened
  because our custom runner parallized tests by &lt;em&gt;file&lt;/em&gt;, while xdist parallizes
  &lt;em&gt;all&lt;/em&gt; tests. When xdist was brought in several tests presented concurrency
  issues within tests on the same file, as they never ran in parallel before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But the adoption is complete and we couldn't be happier with it. We are also
migrating from xUnit tests to fixture based ones as time allows.  &lt;/p&gt;
&lt;h1&gt;Now&lt;/h1&gt;
&lt;p&gt;It's been two years since I became a &lt;a href="https://github.com/pytest-dev/pytest"&gt;pytest&lt;/a&gt;
core developer. I dedicate time to it as much as I can spare, trying to be helpful 
in the issue tracker, contributing PRs and
working on meta-improvements like moving the project to GitHub, 
improving the release process, documentation, etc. &lt;/p&gt;
&lt;p&gt;Pytest was created such an intelligent and friendly people, so I'm really happy to 
be able to work on it and be part of the community.&lt;/p&gt;</summary><category term="python"></category><category term="testing"></category><category term="pytest"></category></entry><entry><title>Things that surprised me in PyCharm</title><link href="http://nicoddemus.github.io/articles/pycharm" rel="alternate"></link><updated>2013-11-06T00:00:00-02:00</updated><author><name>Bruno Oliveira</name></author><id>tag:nicoddemus.github.io,2013-11-06:articles/pycharm</id><summary type="html">&lt;p&gt;I have been an &lt;a href="eclipse.org"&gt;Eclipse&lt;/a&gt; user for years now, using it to
write mostly Python (with &lt;a href="pydev.org"&gt;PyDev&lt;/a&gt;) and C++ (with &lt;a href="http://www.eclipse.org/cdt/"&gt;CDT&lt;/a&gt;).
Recently I heard about &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;
and its new free community edition from a good friend of mine, &lt;a href="https://github.com/itghisi"&gt;Igor&lt;/a&gt;. He, also a long time Eclipse user,
was giving it a lot of praise so I decided to give PyCharm a try, at least while working
at home.&lt;/p&gt;
&lt;p&gt;So far, I have been loving it so much that I have even made the switch to using at work (the community edition is under
&lt;a href="http://choosealicense.com/licenses/apache/"&gt;Apache 2&lt;/a&gt; license).&lt;/p&gt;
&lt;p&gt;Below I describe some of the things that surprised me in a very good way
while using PyCharm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don't intend in no way to bash Eclipse or PyDev, I have been using it in years and it is great.&lt;/p&gt;
&lt;p&gt;Also, keep in mind that this is my personal experience. Your mileage may vary.&lt;/p&gt;
&lt;h1&gt;Real-time Diff&lt;/h1&gt;
&lt;p&gt;PyCharm keeps track of the changes you are making in a file by displaying a blue marker on the left side of the editor:&lt;/p&gt;
&lt;p&gt;&lt;img alt="diff-1" src="http://nicoddemus.github.io/static/pycharm/diff-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;This by itself is very handy, as I used to use the "Compare against HEAD" command all the time in Eclipse to see where I changed
a file. In PyCharm you can with a glance see where your changes are.&lt;/p&gt;
&lt;p&gt;Even more, clicking on the marker you are presented with the previous text and a toolbar:&lt;/p&gt;
&lt;p&gt;&lt;img alt="diff-2" src="http://nicoddemus.github.io/static/pycharm/diff-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can easily select to rollback those changes, view the difference in a full fledged dialog or copy the previous text to the clipboard.&lt;/p&gt;
&lt;h1&gt;Diff view while committing&lt;/h1&gt;
&lt;p&gt;In Eclipse, when you commit you're shown a list of the files being committed
in the commit dialog. You can double-click on any of them to obtain a side-by-side
view of any of the changes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="eclipse-commit-diff" src="http://nicoddemus.github.io/static/pycharm/eclipse-commit-diff.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now, if you see something you like to change in the code (a misspelled word like the above, missing documentation
you would like to add, etc.), too bad: you have to close everything
(including the commit dialog with your nice commit message), go find the offending code and change it,
and start again from scratch.&lt;/p&gt;
&lt;p&gt;PyCharm has the same feature, but your changes are &lt;strong&gt;editable&lt;/strong&gt;. I can't stress enough how awesome is being able to
modify it on spot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycharm-commit-diff" src="http://nicoddemus.github.io/static/pycharm/pycharm-commit-diff.png" /&gt;&lt;/p&gt;
&lt;p&gt;I can fix the typo above easily during the commit process.&lt;/p&gt;
&lt;p&gt;As another side bonus, if you for any reason close the commit dialog, it remembers the commit
message you wrote already the next time you try to commit.&lt;/p&gt;
&lt;h1&gt;Commit-Time Checks&lt;/h1&gt;
&lt;p&gt;Still during commit, we have several options that can be executed before the actual commit, like
"Optimizing Imports" (sort and remove unused), check for TODOs in the change-set, among others:&lt;/p&gt;
&lt;p&gt;&lt;img alt="commit" src="http://nicoddemus.github.io/static/pycharm/commit.png" /&gt;&lt;/p&gt;
&lt;p&gt;One interesting bit is the "Perform code analysis" option...&lt;/p&gt;
&lt;h1&gt;Inspect Code&lt;/h1&gt;
&lt;p&gt;You can ask PyCharm to perform a "Code Inspection" in a single file, directory, or entire projects. It will look for problems
and improvements in your code without actually executing it, like type checking, methods that can be static, violation
of code standards, etc. As explained in the previous section, this can also be
done automatically on changed files during commit.&lt;/p&gt;
&lt;p&gt;Here's the results of an inspection in a single file:&lt;/p&gt;
&lt;p&gt;&lt;img alt="inspection" src="http://nicoddemus.github.io/static/pycharm/inspection.png" /&gt;&lt;/p&gt;
&lt;p&gt;For some of the inspection results, you can also apply a suggested fix. For instance, from
"Function call can be replaced with set literal" we can select the option to fix that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="inspection-2" src="http://nicoddemus.github.io/static/pycharm/inspection-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;PyCharm will then change this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.avi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mp4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mkv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into this, automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.avi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mp4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.mkv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can disable any inspection you like, including on a per-project basis if wanted.&lt;/p&gt;
&lt;h1&gt;Refactoring&lt;/h1&gt;
&lt;p&gt;I was trying to rename a module and couldn't find the option on the menu... F2 also didn't work.&lt;/p&gt;
&lt;p&gt;Then I glanced at the "Refactoring/Rename" sub-menu of the file and thought... &lt;em&gt;could it be?&lt;/em&gt;. Yes!
When you rename a module, PyCharm will ask if you would like to also fix all related imports
for you automatically. &lt;em&gt;Bliss&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is a lot of other refactoring options, but I haven't had the chance to try them
yet.&lt;/p&gt;
&lt;h1&gt;Tooltips regarding obsolete code and improvements&lt;/h1&gt;
&lt;p&gt;PyCharm can inform you about obsolete constructs and suggest improvements in the code.&lt;/p&gt;
&lt;p&gt;For instance, I had code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyCharm was displaying &lt;code&gt;nested&lt;/code&gt; in strike-out:&lt;/p&gt;
&lt;p&gt;&lt;img alt="nested-obsolete" src="http://nicoddemus.github.io/static/pycharm/nested-obsolete.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'm using Python 2.7, and in fact you should use the new syntax for nested context managers, but alas
I have to support old versions of python in that code, so &lt;code&gt;nested&lt;/code&gt; stays.&lt;/p&gt;
&lt;p&gt;The fact that PyCharm warned me about that was pretty cool.&lt;/p&gt;
&lt;h1&gt;Tasks + Feature Branches&lt;/h1&gt;
&lt;p&gt;Like Eclipse (with Mylin), PyCharm also supports a task based workflow (including task-sensitive contexts).&lt;/p&gt;
&lt;p&gt;PyCharm however comes out of the box with a ton of connectors available
(GitHub, Mantis, Jira, Bugzilla, etc). Also, when you start working a task, it asks if
you would like to create a new feature branch for that task, with configurable
branch name.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nested-obsolete" src="http://nicoddemus.github.io/static/pycharm/task-branch.png" /&gt;&lt;/p&gt;
&lt;p&gt;This avoids having to manually create a branch, which is a little tedious (having
the task id on hand, choosing a name, etc).&lt;/p&gt;
&lt;p&gt;Bonus points.&lt;/p&gt;
&lt;h1&gt;Fast&lt;/h1&gt;
&lt;p&gt;I noticed that PyCharm scans source for code completion much faster than Eclipse,
and without interrupting your work. It is really frustrating when you try to save
a file and Eclipse stops you from doing so because it is executing a background task...&lt;/p&gt;
&lt;h1&gt;Quick Documentation&lt;/h1&gt;
&lt;p&gt;When you have the cursor over a function/method/class whatever, you have the option to view "Quick Documentation".
See it in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick-doc" src="http://nicoddemus.github.io/static/pycharm/quick-doc.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it renders the docstring of the method in a nice looking format, plus it infers the parameter types
from code usage... so even if the function doesn't have a docstring, you still get this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick-doc-2" src="http://nicoddemus.github.io/static/pycharm/quick-doc-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Very nice!&lt;/p&gt;
&lt;h1&gt;Docutils Support&lt;/h1&gt;
&lt;p&gt;PyCharm includes first-class support for docutils, making it easy to re-generate the documentation directly from the IDE.&lt;/p&gt;
&lt;p&gt;On the plus side, it also includes a very nice ReST editor (much better than Eclipse IMHO):&lt;/p&gt;
&lt;p&gt;&lt;img alt="rst" src="http://nicoddemus.github.io/static/pycharm/rst.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Sane Plugin System&lt;/h1&gt;
&lt;p&gt;In my experience, installing plugins in Eclipse is a pain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is hard to find where you are suppose to go (tip: &lt;em&gt;Help/Install New Software...&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;You don't have a single index, so you have to find the plugin on the web;&lt;/li&gt;
&lt;li&gt;The dependency system sometimes fails horribly and I end-up not being able to install
  the plugin I wanted (several people at work also experience this and in the end give up);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCharm plugin experience was &lt;strong&gt;much&lt;/strong&gt; smoother.&lt;/p&gt;
&lt;p&gt;First, it is located where you would expect it: It is an item on "Settings":&lt;/p&gt;
&lt;p&gt;&lt;img alt="plugins" src="http://nicoddemus.github.io/static/pycharm/plugins.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can easily browse for plugins directly from there:&lt;/p&gt;
&lt;p&gt;&lt;img alt="plugins-browse" src="http://nicoddemus.github.io/static/pycharm/plugins-browse.png" /&gt;&lt;/p&gt;
&lt;p&gt;I quickly installed a Markdown editor (as nice as ReST's), a pastebin plugin so that I can quickly create pastes directly
from selected text, and CodeGlance, which gives a nice code overview similar to that of SublimeText.&lt;/p&gt;
&lt;h1&gt;Wrapping Up&lt;/h1&gt;
&lt;p&gt;That's it so far. I tried to list everything that I would show to my friends
as "look how cool this is". I have been using PyCharm for very little time,
so if I find more interesting things worth of another post I will write a
continuation.&lt;/p&gt;</summary><category term="python"></category><category term="ide"></category></entry><entry><title>clik: framework for command-line applications</title><link href="http://nicoddemus.github.io/articles/clik" rel="alternate"></link><updated>2013-08-25T22:03:00-03:00</updated><author><name>Bruno Oliveira</name></author><id>tag:nicoddemus.github.io,2013-08-25:articles/clik</id><summary type="html">&lt;p&gt;While working on &lt;a href="https://github.com/nicoddemus/cit"&gt;cit&lt;/a&gt;, I decided that subcommand 
handling that was being done manually was too clumsy (specially after 
&lt;a href="https://github.com/damianimc"&gt;Damiani&lt;/a&gt; went on a flurry and added a ton of new commands). 
That's when I found out about this neat little
framework for subcommand-style applications: &lt;a href="https://github.com/jds/clik"&gt;clik&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You initially must construct an &lt;code&gt;App&lt;/code&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clik&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Command line tool for interacting with a Jenkins integration server.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now with an app object on hand, you can use it as a decorator in any function you have, 
which then exposes that function in the command line as a subcommand of your application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@cit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fb.add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[branch]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;feature_branch_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Create/Update jobs associated with the current git branch.&lt;/span&gt;

&lt;span class="sd"&gt;    This will create one or more jobs on jenkins for the current feature branch,&lt;/span&gt;
&lt;span class="sd"&gt;    or for the one given as parameter if one is provided.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default the sub-command is named after the function itself, but you can pass an alias if you like
(&lt;code&gt;feature_branch_add&lt;/code&gt; is too long to type in the command line). The docstring is also parsed and
the first line is used as a "short help", while the rest is displayed when asking for more
detailed help for a command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cit
cit -- Command line tool &lt;span class="k"&gt;for&lt;/span&gt; interacting with a Jenkins integration server.

Basic usage: cit &amp;lt;subcommand&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;

feature_branch_add, fb.add
    Create/Update &lt;span class="nb"&gt;jobs&lt;/span&gt; associated with the current git branch.

$ cit fb.add -h
Usage: cit feature_branch_add&lt;span class="p"&gt;|&lt;/span&gt;fb.add &lt;span class="o"&gt;[&lt;/span&gt;branch&lt;span class="o"&gt;]&lt;/span&gt;

Create/Update &lt;span class="nb"&gt;jobs&lt;/span&gt; associated with the current git branch.

Options:
  -h, --help  show this &lt;span class="nb"&gt;help&lt;/span&gt; message and &lt;span class="nb"&gt;exit&lt;/span&gt;

This will create one or more &lt;span class="nb"&gt;jobs&lt;/span&gt; on jenkins &lt;span class="k"&gt;for&lt;/span&gt; the current feature branch,
or &lt;span class="k"&gt;for&lt;/span&gt; the one given as parameter &lt;span class="k"&gt;if&lt;/span&gt; one is provided.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neat stuff!&lt;/p&gt;
&lt;p&gt;Your subcommands may receive some predefined arguments, all you have to do is to declare
the argument by name and &lt;code&gt;clik&lt;/code&gt; will automatically inspect the function and pass
the correct parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;: List of arguments, not including application or command name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argv&lt;/code&gt;: List of arguments including the command name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opts&lt;/code&gt;: optparse.Values for the invocation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt;: The click.App running the subcommand.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console&lt;/code&gt;: clik.Console object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf&lt;/code&gt;: ConfigParser.ConfigParser instance. Will be empty if conf is not enabled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt;: logging.Logger instance for the application. Has no handlers (thus does "nothing") if logging is not enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's some really handy features available, like colored output, configuration handling, etc.
You can also customize the parameters. In cit's case I added a few more parameters that 
subcommands can receive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;job_config&lt;/code&gt;: job configuration for the current repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global_config&lt;/code&gt;: global cit configuration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user_name&lt;/code&gt;: current git user name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user_email&lt;/code&gt;: current git user email. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch&lt;/code&gt; : current git branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's &lt;code&gt;fb.rm&lt;/code&gt; making use of the custom parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@cit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fb.rm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[branch]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;feature_branch_rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global_config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Remove jobs associated with the current git branch.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All in all, &lt;code&gt;clik&lt;/code&gt; is a neat little library that greatly helps having to write a lot of 
boilerplate code for command line handling. Highly recommended!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the above code is in a branch &lt;code&gt;better-command-line-handling&lt;/code&gt;... it will
be integrated in &lt;code&gt;master&lt;/code&gt; this week (I think).&lt;/p&gt;</summary><category term="command-line"></category><category term="python"></category><category term="script"></category></entry></feed>