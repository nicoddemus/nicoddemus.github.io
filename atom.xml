<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Midnight Coding]]></title>
  <link href="http://nicoddemus.github.io/atom.xml" rel="self"/>
  <link href="http://nicoddemus.github.io/"/>
  <updated>2013-08-25T23:27:44+02:00</updated>
  <id>http://nicoddemus.github.io/</id>
  <author>
    <name><![CDATA[Bruno Oliveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[clik: framework for command-line applications]]></title>
    <link href="http://nicoddemus.github.io/blog/2013/08/25/clik-framework-for-command-line-applications/"/>
    <updated>2013-08-25T22:03:00+02:00</updated>
    <id>http://nicoddemus.github.io/blog/2013/08/25/clik-framework-for-command-line-applications</id>
    <content type="html"><![CDATA[<p>While working on <a href="https://github.com/nicoddemus/cit">cit</a>, I decided that subcommand
handling that was being done manually was too clumsy (specially after
<a href="https://github.com/damianimc">Damiani</a> went on a flurry and added a ton of new commands).
That&rsquo;s when I found out about this neat little
framework for subcommand-style applications: <a href="https://github.com/jds/clik">clik</a>.</p>

<p>You initially must construct an <code>App</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cit</span> <span class="o">=</span> <span class="n">clik</span><span class="o">.</span><span class="n">App</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="s">&#39;cit&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">description</span><span class="o">=</span><span class="s">&#39;Command line tool for interacting with a Jenkins integration server.</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cit</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with an app object on hand, you can use it as a decorator in any function you have,
which then exposes that function in the command line as a subcommand of your application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@cit</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="s">&#39;fb.add&#39;</span><span class="p">,</span> <span class="n">usage</span><span class="o">=</span><span class="s">&#39;[branch]&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">feature_branch_add</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
</span><span class='line'>     <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Create/Update jobs associated with the current git branch.</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    This will create one or more jobs on jenkins for the current feature branch,</span>
</span><span class='line'><span class="sd">    or for the one given as parameter if one is provided.</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default the sub-command is named after the function itself, but you can pass an alias if you like
(<code>feature_branch_add</code> is too long to type in the command line). The docstring is also parsed and
the first line is used as a &ldquo;short help&rdquo;, while the rest is displayed when asking for more
detailed help for a command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cit</span>
</span><span class='line'><span class="n">cit</span> <span class="o">--</span> <span class="n">Command</span> <span class="n">line</span> <span class="n">tool</span> <span class="k">for</span> <span class="n">interacting</span> <span class="k">with</span> <span class="n">a</span> <span class="n">Jenkins</span> <span class="n">integration</span> <span class="n">server</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Basic</span> <span class="n">usage</span><span class="p">:</span> <span class="n">cit</span> <span class="o">&lt;</span><span class="n">subcommand</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">options</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">feature_branch_add</span><span class="p">,</span> <span class="n">fb</span><span class="o">.</span><span class="n">add</span>
</span><span class='line'>    <span class="n">Create</span><span class="o">/</span><span class="n">Update</span> <span class="n">jobs</span> <span class="n">associated</span> <span class="k">with</span> <span class="n">the</span> <span class="n">current</span> <span class="n">git</span> <span class="n">branch</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">cit</span> <span class="n">fb</span><span class="o">.</span><span class="n">add</span> <span class="o">-</span><span class="n">h</span>
</span><span class='line'><span class="n">Usage</span><span class="p">:</span> <span class="n">cit</span> <span class="n">feature_branch_add</span><span class="o">|</span><span class="n">fb</span><span class="o">.</span><span class="n">add</span> <span class="p">[</span><span class="n">branch</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Create</span><span class="o">/</span><span class="n">Update</span> <span class="n">jobs</span> <span class="n">associated</span> <span class="k">with</span> <span class="n">the</span> <span class="n">current</span> <span class="n">git</span> <span class="n">branch</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Options</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span><span class="n">h</span><span class="p">,</span> <span class="o">--</span><span class="n">help</span>  <span class="n">show</span> <span class="n">this</span> <span class="n">help</span> <span class="n">message</span> <span class="ow">and</span> <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'><span class="n">This</span> <span class="n">will</span> <span class="n">create</span> <span class="n">one</span> <span class="ow">or</span> <span class="n">more</span> <span class="n">jobs</span> <span class="n">on</span> <span class="n">jenkins</span> <span class="k">for</span> <span class="n">the</span> <span class="n">current</span> <span class="n">feature</span> <span class="n">branch</span><span class="p">,</span>
</span><span class='line'><span class="ow">or</span> <span class="k">for</span> <span class="n">the</span> <span class="n">one</span> <span class="n">given</span> <span class="k">as</span> <span class="n">parameter</span> <span class="k">if</span> <span class="n">one</span> <span class="ow">is</span> <span class="n">provided</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neat stuff!</p>

<p>Your subcommands may receive some predefined arguments, all you have to do is to declare
the argument by name and <code>clik</code> will automatically inspect the function and pass
the correct parameters:</p>

<ul>
<li><code>args</code>: List of arguments, not including application or command name.</li>
<li><code>argv</code>: List of arguments including the command name.</li>
<li><code>opts</code>: optparse.Values for the invocation.</li>
<li><code>app</code>: The click.App running the subcommand.</li>
<li><code>console</code>: clik.Console object.</li>
<li><code>conf</code>: ConfigParser.ConfigParser instance. Will be empty if conf is not enabled.</li>
<li><code>log</code>: logging.Logger instance for the application. Has no handlers (thus does &ldquo;nothing&rdquo;) if logging is not enabled.</li>
</ul>


<p>There&rsquo;s some really handy features available, like colored output, configuration handling, etc.
You can also customize the parameters. In cit&rsquo;s case I added a few more parameters that
subcommands can receive:</p>

<ul>
<li><code>job_config</code>: job configuration for the current repository.</li>
<li><code>global_config</code>: global cit configuration.</li>
<li><code>user_name</code>: current git user name.</li>
<li><code>user_email</code>: current git user email.</li>
<li><code>branch</code> : current git branch.</li>
</ul>


<p>Here&rsquo;s <code>fb.rm</code> making use of the custom parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@cit</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="s">&#39;fb.rm&#39;</span><span class="p">,</span> <span class="n">usage</span><span class="o">=</span><span class="s">&#39;[branch]&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">feature_branch_rm</span><span class="p">(</span><span class="n">branch</span><span class="p">,</span> <span class="n">global_config</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Remove jobs associated with the current git branch.</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All in all, <code>clik</code> is a neat little library that greatly helps having to write a lot of
boilerplate code for command line handling. Highly recommended!</p>

<p><strong>Note</strong>: the above code is in a branch <code>better-command-line-handling</code>&hellip; it will
be integrated in <code>master</code> this week (I think).</p>
]]></content>
  </entry>
  
</feed>
